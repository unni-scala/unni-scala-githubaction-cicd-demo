param location string = resourceGroup().location
param storageNamePrefix string
param acr_name string = 'supertonne'
param asb_name string = 'supertonne-asb'
param app_name string = 'supertonne-app'
param asp_name string = 'ASP-${app_name}'

var stgacc_name = '${storageNamePrefix}${uniqueString(resourceGroup().id)}'

resource storage_account 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: stgacc_name
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
}

resource container_registry 'Microsoft.ContainerRegistry/registries@2023-01-01' = {
  name: acr_name
  location: location
  sku: {
    name: 'Basic'
  }
  properties: {
    adminUserEnabled: true
  }
}

resource asb 'Microsoft.ServiceBus/namespaces@2021-11-01' = {
  name: asb_name
  location: location
}

resource hostingPlan 'Microsoft.Web/serverfarms@2018-11-01' = {
  name: asp_name
  location: location
  kind: 'linux'
  sku: {
    name: 'F1'
    tier: 'Free'
    size: 'F1'
    family: 'F'
    capacity: 1
  }
  dependsOn: []
}

resource name_resource 'Microsoft.Web/sites@2022-03-01' = {
  name: app_name
  location: location
  tags: null
  properties: {
    name: name
    siteConfig: {
      appSettings: []
      linuxFxVersion: linuxFxVersion
      alwaysOn: alwaysOn
      ftpsState: ftpsState
    }
    serverFarmId: '/subscriptions/${subscriptionId}/resourcegroups/${serverFarmResourceGroup}/providers/Microsoft.Web/serverfarms/${hostingPlanName}'
    clientAffinityEnabled: false
    virtualNetworkSubnetId: null
    httpsOnly: true
    publicNetworkAccess: 'Enabled'
    autoGeneratedDomainNameLabelScope: autoGeneratedDomainNameLabelScope
  }
  dependsOn: [
    hostingPlan
  ]
}

